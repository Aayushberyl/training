		 GIT Commands and installation

Intro - git is a versioning tool used to maintain versions and codes.
Advantages - helps to share code , maintain backups , performance , security , flexibility , wild acceptance.
Disadvantages - pricing.
My version - 2.31.1
Latest version - 2.31.1

Stages of Git

1) Untracked - only those files which we don't want to commit or don't want git to look into those files
2) Staged - we add those files here which we want to commit or save in git
3) Unmodified - after commit , here file will be counted in git files
4) Modified - after editing our files will be counted at modified stage

Git Staging Areas------->> Untracked(add file)--> Staged(commit)--> Unmodified(edit file)--> Modified(stage the file)-->Staged(commit)-->Unmodified/Modified


To install --> sudo apt-get install git
after installation
1) git config --global user.name Aayushberyl = To configure your username on git
2) git config --global user.email aayush.beryl@berylsystems.com = To configure your email on git
3) git init = Used to initialize an empty git repository
4) git config --global --get-all user.name = Dsiplays all username
5) git config --global --replace-all user.name Aayushberyl = replaces all username
6) git config --global --replace-all user.email aayush.joshi@berylsystems.com = replaces all emails
7) code . = it opens vs code (or any code editor)
8) git status = displays the status of your files (before add-files in red color) , (after add-in green color)
9) git add filename = adds file to git repository
10) git commit  = it is initial commit to keep track of all files in your git repository (in vim insert mode type Initial commit)
11) git add -A = add all files in staging area in one go
12) git checkout filename = used to match file with last commit
13) git checkout -f = used to match all file with last commit
14) git log = it shows all commits
15) git log -3 = it shows last 3 commits
16) git diff = it shows the diff b/w files (it compare working tree files with staging area files)
17) git diff --staged = it compares staging area files with last commit
18) git commit -a -m "commit message" = this skips staging area of modified files and directly commit
19) git rm --cached filename = it removes filoe from staging area not from HD
20) git rm filename = it removes file from HD also
21) git rm -f filename = it removes file forcefully and also from index
22) git status -s = it shows short status in (staging|working tree) format. ex - MM filename means file is modified in staging area as well as in working tree
23) touch .gitignore = the text contains in this file will be ignored by git
24) git branch newbranchname = it creates a new branch from master branch
25) git checkout branchname = it switches to specified branch from master branch
26) git merge branchname = it merges new branch into master branch. you should be present at master branch to merge two branches
27) git restore filename = it is used to undo the last change in file
28) git reset --hard HEAD^ = undo last commit
29) git restore --staged filename = it is used to unstage the file
30) git checkout -b newbranch = it will create a new branch and checkout to new branch directly
31) git remote add origin url = it is used to connect your local repository to the remote server
32) git remote -v = it shows push and pull links
33) git push -u origin master - it will send files to server (add into github account repository). Now after every push it automatically push next pushes in origin master branch.
34) git pull origin master = it pull all the commits done in github files
35) git clone url foldername = it will clone the file in the folder
36) git branch -d branchname = it directly delete one branch from repository if it has not been merged. To do this command you must be present on master branch
37) git branch -D branchname = Force delete the specified branch, even if it has unmerged changes
38) git branch -m branchname = it renames current branch to branchname
39) git branch -a = list all remote branches
40) git push origin --delete branchname = it will send msg to remote repo to delete branch from remote repo
41) 
