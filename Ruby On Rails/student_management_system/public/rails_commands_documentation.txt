

1) gem install rails to install rails

2) creating a new project in rails => rails new "project name" -d "database name"

3) make changes in database.yml file such as adding port number , host , username , password.

4) run rake db:create command to create a database of same name as of project name.

5) creating a new table => rails g model 'table_name'

6) to generate model/table ----> rails generate model Product name:string description:text

7) then updated no. of columns in corresponding rb file

8) then db:migrate => to change the migration in db files

9) to alter(add new column) the table use ---> rails generate migration add_email_to_students email:string

	add_column (table_name , column_name , datatype)

10) to alter(remove a column) the table use ---> rails generate migration remove_email_from_students email:string

	or remove_column (table_name , column_name)

11) can create table using this command ---> generate migration CreateProducts name:string part_number:string 

12) change column datatype ----> change_column :tablename, :columnname, :datatype

13) renaming column -----> rename_column :tablename , :columnname, :new_columnname

14) drop table ------> drop_table(name)

15) add index -------> add_index(table_name , column_name )

16) remove index -----> remove_index(table_name , column_name )

17) To add Foreign key use add_reference keyword like : add_reference :referencing_table , :referenced_table

					
	
				18) ASSOCIATIONS 

to add associations one should know the relation between the tables they want to form

like one course can have many students     		--------> has_many :students
but many students can have only one course		--------> belongs_to :course



various (6) types of Associations are : 

a) belongs_to

b) has_one 

c) has_many

d) has_many :through			-----------> (relationship using intermediate {join} table)

e) has_one :through

f) has and belongs to many		-----------> (direrct relationship)


To make things easier, you can look at the types of Association this way:


1) has_many + belongs_to = one-to-many relationship

2) has_one + belongs_to = one-to-one relationship

3) has_many :through + belongs_to = many-to-many relationship using intermediate table

4) has_one :through + belongs_to = one-to-one relationship using intermediate table

5) has_and_belongs_to_many = many-to-many relationship  



				19)POLYMORPHIC ASSOCIATIONS


1) With polymorphic associations, a model can belong to more than one other model, on a single association.

2) Write This in Your Polymorphic Table  (Feedback)  --- >  t.references :comments, polymorphic: true

3) Update This Both things in your Both Referenced Table (here Student and Faculty Tables)for Polymorphic --- > 

has_many :feedbacks, as: :comments


4) Insert Data in Polymorphic Table (Feedback) --- > Feedback.create(content:'Good College' , comments: Student.find(1))

	Syntax : Polymorphic_table_name.create(content_column_name:'anything' , comments:Referenced_Table.find(1))
	here comments represents alias of Student and Faculty for Feedback model.



				20)ACTIVE RECORD :VALIDATIONS

1) Insert this command in model where you want to add validsations --- > validates :name, presence: true

irb> Person.create(name: "John Doe").valid?
=> true

irb> Person.create(name: nil).valid?
=> false

METHODS TO CHECK VALIDATIONS (! -- > Bang Version is used for strict validations)

update!

create!

save!



2) To Validate Email --- > validates :email , presence: true , format: /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i

3) To Validate faculty_name and add custom message --- >     validates! :faculty_name, presence: {message: "must be given"}

4) To Validate a particular range --- > validates :certification_id , numericality: {less_than:7}




				21)ACTIVE RECORD :CALLBACKS


In Rails, callbacks are hooks provided by Active Record that allow methods to run before or after a create, update, or destroy action occurs to an object.





				22) CONTROLLERS IN RAILS

* The Rails controller is the logical center of your application. It coordinates the interaction between the user, the views, and the model. The controller is also a home to a number of important ancillary services.



* It is responsible for routing external requests to internal actions. It handles people-friendly URLs extremely well.

* It manages caching, which can give applications orders-of-magnitude performance boosts.

* It manages helper modules, which extend the capabilities of the view templates without bulking up their code.

* It manages sessions, giving users the impression of an ongoing interaction with our applications.

** CONTROLLER CREATION SYNTAX : rails generate controller Book


* Controller classes inherit from ApplicationController, which is the other file in the controllers folder: application.rb


* The params object is a container that enables you to pass values between method calls.



				23) SCAFFOLDING IN RAILS

* Scaffolding is a quick way to produce some major pieces of an application. For auto generating a set of models, views and controllers for a new resource in a single operation, scaffolding is used.

* Scaffolding is a technique supported by MVC frameworks in which programmers can specify how application database may be used. The framework or compiler uses it together with pre-defined code templates to generate the final code that the application can use to perform CRUD in database entries, effectively treating the templates as a "scaffold" on which to build a more powerful application.

* Scaffolding occurs at two different phases of the program lifecycle, design time and run time. 
1) Design time scaffolding produces files of code that can later be modified by the programmer.
2) Run time scaffolding produces code on the fly. It allows changes to the design of the templates to be immediately reflected throughout the application.

* Syntax to generate scaffold in rails --- > rails generate scaffold model_name

* Example : rails generate scaffold Post name:string title:string content:text 

* Scaffold Creation Example

1) Create an Application 
    rails new example  

2) create MVC components using Scaffold

    cd example  
    rails generate scaffold post title:string body:text  
    rails generate scaffold comment post_id:integer body:text  

3) first move to the application directory and then create database tables comments and post_id

    rake db:migrate  

4) Run Migrations

    rake routes  

5) Start web server

    rails server

6) Run http://localhost:3000/posts in your browser 
