1) 3.0.1 :001 > ary = Array.new
 => [] 

2) 3.0.1 :002 > Array.new(4) {Hash.new}
 => [{}, {}, {}, {}] 

3) 3.0.1 :004 > Array.new(4) {Set.new}
 => [#<Set: {}>, #<Set: {}>, #<Set: {}>, #<Set: {}>] 

4) 3.0.1 :001 > empty_table = Array.new(3) {Array.new(3)}
 => [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]] 

5) 3.0.1 :002 > Array({:a => "a", :b => "b"}) #=> [[:a, "a"], [:b, "b"]]
 => [[:a, "a"], [:b, "b"]] 

6) 3.0.1 :003 > arr = [1, 2, 3, 4, 5, 6]
 => [1, 2, 3, 4, 5, 6] 
3.0.1 :004 > arr[1]
 => 2 
3.0.1 :005 > arr[2,4]
 => [3, 4, 5, 6]
3.0.1 :022 > arr.at(5)
 => 6 
3.0.1 :023 > arr[-5]
 => 2 
3.0.1 :025 > arr.at(-5)
 => 2 
3.0.1 :027 > arr[-5,4]
 => [2, 3, 4, 5] 
3.0.1 :030 > arr.fetch(3)
 => 4 
3.0.1 :033 > arr[100]
 => nil 

7) 3.0.1 :037 > arr.first
 => 1 
3.0.1 :038 > arr.last
 => 6 
3.0.1 :085 > a
 => [1, 2, 3, 4, 5] 
3.0.1 :082 > a.last(3)
 => [3, 4, 5] 
3.0.1 :084 > a.first(4)
 => [1, 2, 3, 4] 


8) 3.0.1 :039 > arr.take(3)
 => [1, 2, 3] 
3.0.1 :040 > arr
 => [1, 2, 3, 4, 5, 6] 
3.0.1 :041 > arr.drop(3)
 => [4, 5, 6] 
3.0.1 :042 > arr
 => [1, 2, 3, 4, 5, 6] 

9) 3.0.1 :050 > browsers
 => ["Chrome", "Firefox", "Safari", "Opera", "IE"] 
3.0.1 :051 > browsers.length
 => 5 
3.0.1 :052 > browsers.size
 => 5 
3.0.1 :053 > browsers.count
 => 5 

10) 3.0.1 :054 > browsers.empty? 
 => false 

11) 3.0.1 :073 > browsers
 => ["Chrome", "Firefox", "Safari", "Opera", "IE"] 
3.0.1 :069 > browsers.include?('firefox')
 => false 
3.0.1 :070 > browsers.include?('Firefox')
 => true 
 3.0.1 :072 > browsers.include?('firefox'.capitalize)
 => true 

12) 3.0.1 :074 > arr
 => [1, 2, 3, 4, 5, 6] 
3.0.1 :075 > arr.push(7)
 => [1, 2, 3, 4, 5, 6, 7] 
3.0.1 :076 > arr<<8
 => [1, 2, 3, 4, 5, 6, 7, 8] 

13) 3.0.1 :074 > arr
 => [1, 2, 3, 4, 5, 6] 
3.0.1 :077 > arr.shift
 => 1 
3.0.1 :080 > arr.unshift(1)
 => [1, 2, 3, 4, 5, 6, 7, 8] 

14) 3.0.1 :085 > arr
 => [1, 2, 3, 4, 5, 7, 8] 
3.0.1 :081 > arr.delete(5)
 => 5 
3.0.1 :082 > arr
 => [1, 2, 3, 4, 6, 7, 8] 
3.0.1 :083 > arr[4]=5
 => 5 
3.0.1 :084 > arr
 => [1, 2, 3, 4, 5, 7, 8] 
 3.0.1 :086 > arr.insert(8,9)
 => [1, 2, 3, 4, 5, 7, 8, nil, 9] 
3.0.1 :087 > arr.compact
 => [1, 2, 3, 4, 5, 7, 8, 9]
3.0.1 :094 > arr.compact!
 => [1, 2, 3, 4, 5, 7, 8, 9] 
3.0.1 :096 > arr.pop
 => 9 
3.0.1 :097 > arr
 => [1, 2, 3, 4, 5, 7, 8]  
3.0.1 :104 > arr.pop(2)
 => [7, 8] 
3.0.1 :105 > arr
 => [1, 2, 3, 4, 5, 6] 



 15) 3.0.1 :088 > fruits=['Grapes','Banana','Apple','Kiwi','Watermelon']
 => ["Grapes", "Banana", "Apple", "Kiwi", "Watermelon"] 
3.0.1 :089 > fruits.insert(3, 'orange', 'pear', 'grapefruit')
 => ["Grapes", "Banana", "Apple", "orange", "pear", "grapefruit", "Kiwi", "Watermelon"] 

16) 3.0.1 :111 > arr.delete_at(3)
 => 4 
3.0.1 :112 > arr
 => [1, 2, 3, 5, 6] 
3.0.1 :113 > arr.insert(3,4)
 => [1, 2, 3, 4, 5, 6] 

17) 3.0.1 :117 > arr
 => [1, 2, 3, 2, 5, 6] 
3.0.1 :118 > arr.delete(2)
 => 2 
3.0.1 :119 > arr
 => [1, 3, 5, 6] 

18) 3.0.1 :124 > arr
 => [1, 2, 2, 3, 4, 5, 6] 
3.0.1 :125 > arr.uniq!
 => [1, 2, 3, 4, 5, 6] 
3.0.1 :126 > arr
 => [1, 2, 3, 4, 5, 6] 

19) 3.0.1 :133 > arr.each { |i| print i," "}
1 2 3 4 5 6  => [1, 2, 3, 4, 5, 6] 

3.0.1 :137 > arr.each do |i|
3.0.1 :138 >   print i," "
3.0.1 :139 > end
1 2 3 4 5 6  => [1, 2, 3, 4, 5, 6] 

20) 3.0.1 :145 > words=["one","two","three"]
 => ["one", "two", "three"]
3.0.1 :147 > words.reverse
 => ["three", "two", "one"] 
3.0.1 :155 > str
 => "" 
3.0.1 :156 > words.reverse_each {|a| str += "#{a} "}
 => ["one", "two", "three"] 
3.0.1 :157 > str
 => "three two one " 

21)  3.0.1 :160 > arr
 => [1, 2, 3, 4, 5, 6] 
3.0.1 :161 > arr.map {|i| 2*i}
 => [2, 4, 6, 8, 10, 12] 
3.0.1 :168 > arr.map! {|i| 2*i}
 => [2, 4, 6, 8, 10, 12] 
3.0.1 :169 > arr.map! {|i| i/2}
 => [1, 2, 3, 4, 5, 6] 

22) 3.0.1 :170 > arr
 => [1, 2, 3, 4, 5, 6] 
3.0.1 :171 > arr.select {|i| i>3}
 => [4, 5, 6]
 3.0.1 :177 > arr.reject {|i| i>3}
 => [1, 2, 3] 
3.0.1 :176 > arr.drop_while {|i| i<3}
 => [3, 4, 5, 6] 

 23) 3.0.1 :001 > a=[1,2,3]
 => [1, 2, 3] 
 3.0.1 :007 > a.delete_if {|i| i>2}
 => [1, 2] 
 3.0.1 :002 > b=[1,2,3]
 => [1, 2, 3] 
3.0.1 :009 > b.keep_if {|i| i>2}
 => [3] 

24) 3.0.1 :020 > 12.eql?12
 => true 
3.0.1 :021 > "a".eql?"a"
 => true                          -----> It only references to object and datatype not object_id (It is same as ==)
3.0.1 :022 > "a".equal?"a"
 => false                         -----> It references to object id thats why it return false

25) 3.0.1 :045 > a
 => [1, 2, 3, 4] 
3.0.1 :046 > b
 => [3, 4, 5, 6] 
3.0.1 :044 > a | b
 => [1, 2, 3, 4, 5, 6] 
3.0.1 :047 > a & b
 => [3, 4] 
3.0.1 :049 > a*2
 => [1, 2, 3, 4, 1, 2, 3, 4] 

26) 3.0.1 :052 > a + b
 => [1, 2, 3, 4, 3, 4, 5, 6] 
3.0.1 :053 > a - b
 => [1, 2] 

27) 3.0.1 :059 > a<=>b
 => -1 
3.0.1 :060 > b<=>a
 => 1 
3.0.1 :061 > a=[1,3,5]
 => [1, 3, 5] 
3.0.1 :062 > b=[1,3,5]
 => [1, 3, 5] 
3.0.1 :063 > a<=>b
 => 0 
3.0.1 :064 > a==b
 => true 

28) 3.0.1 :071 > arr
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
3.0.1 :072 > arr.slice(2)
 => 3 

29) 3.0.1 :098 > arr
 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
3.0.1 :099 > a
 => [1, 3, 5] 
3.0.1 :082 > arr.all?
 => true 
3.0.1 :083 > arr.all?(2)
 => false 
3.0.1 :084 > arr.all?(Integer)
 => true 
3.0.1 :085 > [0, 1, 2].all? { |element| element < 3 }
 => true 
3.0.1 :086 > [0, 1, 2].all? { |element| element < 2 } 
 => false 
3.0.1 :097 > a.any?{|i| i>1 }
 => true 
3.0.1 :094 > a.any?
 => true 
3.0.1 :091 > a.any?5
 => true 
3.0.1 :090 > a.include?5
 => true 
3.0.1 :100 > [nil, 0, false].any?
 => true 
3.0.1 :101 > [nil, false].any?
 => false 


30) 3.0.1 :102 > a
 => [1, 3, 5] 
3.0.1 :103 > a.append(7,8,9)
 => [1, 3, 5, 7, 8, 9] 
3.0.1 :104 > a.push(10,11,12)
 => [1, 3, 5, 7, 8, 9, 10, 11, 12] 

 31) 3.0.1 :116 > a = [{foo: 0}, [2, 4], [4, 5, 6], [4, 5]]
 => [{:foo=>0}, [2, 4], [4, 5, 6], [4, 5]] 
3.0.1 :117 > a.assoc(4)
 => [4, 5, 6] 
3.0.1 :118 > a.assoc(2)
 => [2, 4] 

32)  => [{:foo=>0}, [2, 4], [4, 5, 6], [4, 5]] 
3.0.1 :124 > a.fetch(2)
 => [4, 5, 6] 
3.0.1 :125 > a.at(2)
 => [4, 5, 6] 
3.0.1 :126 > a[2]
 => [4, 5, 6] 

33) 3.0.1 :131 > a
 => [{:foo=>0}, [2, 4], [4, 5, 6], [4, 5]] 
3.0.1 :134 > a.shift
 => {:foo=>0} 
3.0.1 :135 > a
 => [[2, 4], [4, 5, 6], [4, 5]] 
3.0.1 :136 > a.flatten!
 => [2, 4, 4, 5, 6, 4, 5] 


34)  3.0.1 :135 > a
=> [2, 4, 4, 5, 6, 4, 5] 
3.0.1 :137 > a.bsearch{|i| i>4}             ------> Minimum Mode of Binary Search
 => 5 

3.0.1 :143 > a.bsearch{|i| i<=>4}
 => 4 
3.0.1 :144 > a.bsearch{|i| i<=>-1}
 => nil 

 3.0.1 :140 > a.map{|i| i>4}                 -----> Blocks of Minimum Mode of Binary Search
 => [false, false, false, true, true, false, true] 

3.0.1 :145 > a.map{|i| i<=>4}
 => [-1, 0, 0, 1, 1, 0, 1] 
3.0.1 :146 > a
3.0.1 :150 > a.bsearch_index{|i| i==4}
 => 5 

35) 3.0.1 :151 > a
 => [2, 4, 4, 5, 6, 4, 5] 
3.0.1 :152 > a.clear
 => [] 
3.0.1 :153 > a
 => [] 

36) 3.0.1 :159 > a.map {|i| i.class}
 => [Integer, Integer, Integer, Integer, Integer, Integer, Integer] 

37) 3.0.1 :164 > a=[0,1,2]
3.0.1 :165 > a.combination(2){|combination| p combination}
[0, 2]
[1, 2]
 => [0, 1, 2] 

38) 3.0.1 :171 > a
 => [0, 1, 2] 
3.0.1 :172 > a.concat([5,6],[7,9])
 => [0, 1, 2, 5, 6, 7, 9] 
3.0.1 :173 > a
 => [0, 1, 2, 5, 6, 7, 9] 

39) 3.0.1 :176 > a
 => [0, 1, 2, 5, 6, 7, 44, 9, 6, 44] 
3.0.1 :177 > a.count(44)
 => 2 

40) 3.0.1 :183 > a
 => [0, 1, 2, 5, 6, 7, 44, 9, 6, 44] 
3.0.1 :182 > a.cycle(2){|i|print i*i ," "}
0 1 4 25 36 49 1936 81 36 1936 0 1 4 25 36 49 1936 81 36 1936  => nil 

41) 3.0.1 :002 > a=[1,2,3,4]
 => [1, 2, 3, 4] 
3.0.1 :003 > a.delete_if{|i| i>2}
 => [1, 2] 
3.0.1 :004 > a
 => [1, 2] 

42) 3.0.1 :008 > a
 => [1, 2, 3, 4] 
3.0.1 :009 > b
 => [3, 4, 5, 6] 
3.0.1 :010 > a.difference(b)
 => [1, 2] 
3.0.1 :011 > b.difference(a)
 => [5, 6] 

43) 3.0.1 :014 > z
 => [:foo, [:bar, :baz, [:bat, :bam]]] 
3.0.1 :015 > z.dig(1)
 => [:bar, :baz, [:bat, :bam]] 
3.0.1 :021 > z.dig(1,2)
 => [:bat, :bam] 
3.0.1 :017 > z.dig(1,2,0)
 => :bat 
3.0.1 :020 > z.dig(1,2,3)
 => nil 

44) 3.0.1 :024 > a
 => [1, 2, 3, 4] 
3.0.1 :025 > a.drop(1)
 => [2, 3, 4] 
3.0.1 :026 > a.drop(2)
 => [3, 4] 
3.0.1 :027 > a.drop(3)
 => [4] 
3.0.1 :028 > a.drop(4)
 => [] 
3.0.1 :030 > a.drop_while{|i| i<3}
 => [3, 4] 


45) 3.0.1 :031 > a.each {|i| puts ("#{i.class} #{i}")}
Integer 1
Integer 2
Integer 3
Integer 4
 => [1, 2, 3, 4] 

46) 3.0.1 :032 > a.each_index {|i| puts i}
0
1
2
3
 => [1, 2, 3, 4] 

47) 3.0.1 :034 > a.empty?
 => false 

48) 3.0.1 :008 > a
 => [1, 2, 3, 4] 
3.0.1 :038 > a.fill(:x)
 => [:x, :x, :x, :x] 
3.0.1 :039 > a
 => [:x, :x, :x, :x] 

3.0.1 :041 > a.fill(:x,2)
 => [1, 2, :x, :x] 

 3.0.1 :042 > a=[1,2,3,4]
 => [1, 2, 3, 4] 
3.0.1 :043 > s="shyam"
 => "shyam" 
3.0.1 :044 > a.fill(s,2)
 => [1, 2, "shyam", "shyam"] 


49) 3.0.1 :056 > a1 = a.select {|element| element.to_s.start_with?('s') }
 => ["shyam", "shyam"] 

50) 3.0.1 :060 > a.index(2)
 => 1 
3.0.1 :061 > a.index("shyam")
 => 2 

51) 3.0.1 :062 > a=[1,2,3,4,[90,80,70,60,[33,44,55,66,[98,87,76,65]]]]
 => [1, 2, 3, 4, [90, 80, 70, 60, [33, 44, 55, 66, [98, 87, 76, 65]]]] 
3.0.1 :063 > a.flatten
 => [1, 2, 3, 4, 90, 80, 70, 60, 33, 44, 55, 66, 98, 87, 76, 65]
3.0.1 :065 > a.flatten(1)
 => [1, 2, 3, 4, 90, 80, 70, 60, [33, 44, 55, 66, [98, 87, 76, 65]]] 

52) 3.0.1 :066 > a.hash           -----> Two arrays with the same content will have the same hash code (and will compare using eql?):
 => 1176030532731616229 

53) 3.0.1 :069 > a.replace([1,2,3,4,5])
 => [1, 2, 3, 4, 5] 
3.0.1 :070 > a
 => [1, 2, 3, 4, 5] 

54) 3.0.1 :071 > a.inspect
 => "[1, 2, 3, 4, 5]" 
3.0.1 :072 > a
 => [1, 2, 3, 4, 5]

55) 3.0.1 :073 > [1,2,3,4].intersection([1,4,6,7])
 => [1, 4] 

56) 3.0.1 :077 > a.join(" bro ")
 => "1 bro 2 bro 3 bro 4 bro 5" 
3.0.1 :079 > a.join
 => "12345" 

57) 3.0.1 :001 > a=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 
3.0.1 :002 > a.max
 => 5 
3.0.1 :003 > a.min
 => 1 
3.0.1 :004 > a.max(4)
 => [5, 4, 3, 2] 
3.0.1 :005 > a.max(2)
 => [5, 4] 
3.0.1 :008 > a.min(3)
 => [1, 2, 3] 

58)  => [1, 2, 3, 4, 5] 
3.0.1 :014 > a.minmax
 => [1, 5

59) 3.0.1 :015 > [nil, false].none?
 => true 
3.0.1 :016 > [nil, 0, false].none?
 => false 

60) 3.0.1 :020 > a
 => [1, 2, 3, 4, 5] 
3.0.1 :021 > a.one?
 => false 
3.0.1 :025 > a
 => [1, 2, 3, 4, 5] 
3.0.1 :026 > a.one?(1)
 => true 
3.0.1 :027 > a.one?(0)
 => false 

61) 3.0.1 :041 > a.combination(2){|i| print i," "}
[1, 2] [1, 3] [1, 4] [1, 5] [2, 3] [2, 4] [2, 5] [3, 4] [3, 5] [4, 5]  => [1, 2, 3, 4, 5] 
3.0.1 :042 > a.permutation(2){|i| print i," "}
[1, 2] [1, 3] [1, 4] [1, 5] [2, 1] [2, 3] [2, 4] [2, 5] [3, 1] [3, 2] [3, 4] [3, 5] [4, 1] [4, 2] [4, 3] [4, 5] [5, 1] [5, 2] [5, 3] [5, 4]  => [1, 2, 3, 4, 5] 

62) 3.0.1 :046 > a.prepend(0)
 => [0, 1, 2, 3, 4, 5] 

63) 3.0.1 :048 > a=[1,2,3]
 => [1, 2, 3] 
3.0.1 :049 > b=[3,4,5]
 => [3, 4, 5] 
3.0.1 :050 > a.product(b)
 => [[1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5]]
3.0.1 :052 > a.product
 => [[1], [2], [3]]

64) 3.0.1 :058 > z=[1,2,3,[4,5,6,7],[4,5]]
 => [1, 2, 3, [4, 5, 6, 7], [4, 5]] 
3.0.1 :059 > z.rassoc(5)
 => [4, 5, 6, 7] 

65) 3.0.1 :064 > a.reject{|i| puts i," " if i<2}
1
 
 => [1, 2, 3] 

66) 3.0.1 :068 > a.combination(2) {|combination| print combination," " }
[1, 2] [1, 3] [2, 3]  => [1, 2, 3] 
3.0.1 :069 > a.repeated_combination(2) {|combination| print combination," " }
[1, 1] [1, 2] [1, 3] [2, 2] [2, 3] [3, 3]  => [1, 2, 3] 

67) 3.0.1 :070 > a.permutation(2){|i| print i," "}
[1, 2] [1, 3] [2, 1] [2, 3] [3, 1] [3, 2]  => [1, 2, 3] 
3.0.1 :071 > a.repeated_permutation(2){|i| print i," "}
[1, 1] [1, 2] [1, 3] [2, 1] [2, 2] [2, 3] [3, 1] [3, 2] [3, 3]  => [1, 2, 3] 

68) 3.0.1 :086 > a=[1,2,3,4,5,6,7,8,2]
 => [1, 2, 3, 4, 5, 6, 7, 8, 2] 
3.0.1 :087 > a.index(2)
 => 1 
3.0.1 :088 > a.rindex(2)
 => 8 

69) 3.0.1 :089 > a
 => [1, 2, 3, 4, 5, 6, 7, 8, 2] 
3.0.1 :090 > a.rotate
 => [2, 3, 4, 5, 6, 7, 8, 2, 1] 
3.0.1 :093 > a.rotate(3)
 => [4, 5, 6, 7, 8, 2, 1, 2, 3]
3.0.1 :094 > a.rotate(-3)
 => [7, 8, 2, 1, 2, 3, 4, 5, 6] 

70) 3.0.1 :092 > a
 => [4, 5, 6, 7, 8, 2, 1, 2, 3] 
 => [7, 8, 2, 1, 2, 3, 4, 5, 6] 
 => [1, 2, 3, 4, 5, 6, 7, 8, 2] 
3.0.1 :097 > a
3.0.1 :098 > a.sample
 => 6
3.0.1 :099 > a.sample
 => 7 
3.0.1 :100 > a.sample
 => 2 
3.0.1 :101 > a.sample
 => 3 
3.0.1 :102 > a.sample
 => 7 
3.0.1 :103 > a.sample(3)
 => [3, 4, 8] 
3.0.1 :104 > a.sample(3)
 => [1, 2, 2] 
3.0.1 :106 > a.sample(a.size)
 => [8, 6, 7, 2, 5, 4, 3, 2, 1] 

71) 3.0.1 :111 > a
 => [1, 2, 3, 4, 5, 6, 7, 8, 2] 
3.0.1 :112 > a.shuffle
 => [6, 1, 8, 5, 3, 4, 2, 2, 7] 
3.0.1 :113 > a.shuffle
 => [8, 7, 3, 5, 1, 2, 6, 4, 2] 

72) 3.0.1 :114 > a
 => [1, 2, 3, 4, 5, 6, 7, 8, 2] 
3.0.1 :115 > a.sort
 => [1, 2, 2, 3, 4, 5, 6, 7, 8] 
3.0.1 :116 > a.sort.uniq
 => [1, 2, 3, 4, 5, 6, 7, 8] 

73) 3.0.1 :117 > q='qwertyuiopasd'
 => "qwertyuiopasd" 
3.0.1 :121 > l=q.split("").shuffle
 => ["w", "y", "d", "r", "s", "e", "o", "u", "t", "q", "p", "i", "a"] 
3.0.1 :122 > l.sort{|a,b| a<=>b}
 => ["a", "d", "e", "i", "o", "p", "q", "r", "s", "t", "u", "w", "y"] 
3.0.1 :123 > l.sort
 => ["a", "d", "e", "i", "o", "p", "q", "r", "s", "t", "u", "w", "y"] 
3.0.1 :125 > l.sort.join
 => "adeiopqrstuwy" 

74) 3.0.1 :126 > q = ['aaaa', 'bbb', 'cc', 'd']
 => ["aaaa", "bbb", "cc", "d"] 
3.0.1 :127 > q.sort_by{|i| i.size}
 => ["d", "cc", "bbb", "aaaa"] 

75) 3.0.1 :128 > a
 => [1, 2, 3, 4, 5, 6, 7, 8, 2] 
3.0.1 :129 > a.sum
 => 38 

76) 3.0.1 :130 > a
 => [1, 2, 3, 4, 5, 6, 7, 8, 2] 
3.0.1 :131 > a.take_while{|i| i<5}
 => [1, 2, 3, 4] 

77) 3.0.1 :140 > g={'1'=>45}
 => {"1"=>45} 
3.0.1 :141 > g.to_a
 => [["1", 45]] 
 3.0.1 :138 > s
 => "honey" 
3.0.1 :139 > s.chars
 => ["h", "o", "n", "e", "y"] 

78) 3.0.1 :150 > g=[[1,2],[3,4]]
 => [[1, 2], [3, 4]] 
3.0.1 :151 > g.to_h
 => {1=>2, 3=>4} 

79) 3.0.1 :152 > a
 => [1, 2, 3, 4, 5, 6, 7, 8, 2] 
3.0.1 :153 > a.to_s
 => "[1, 2, 3, 4, 5, 6, 7, 8, 2]" 

80) 3.0.1 :154 > z=[[:a0, :a1], [:b0, :b1], [:c0, :c1]]
 => [[:a0, :a1], [:b0, :b1], [:c0, :c1]] 
3.0.1 :155 > z.transpose
 => [[:a0, :b0, :c0], [:a1, :b1, :c1]] 

81) 3.0.1 :158 > [1,2,3].union([3,4,5])
 => [1, 2, 3, 4, 5] 

82) 3.0.1 :159 > a
 => [1, 2, 3, 4, 5, 6, 7, 8, 2] 
3.0.1 :160 > a.values_at(3)
 => [4] 

83) 3.0.1 :161 > c = [:c0, :c1, :c2, :c3]
3.0.1 :162 > b = [:b0, :b1, :b2, :b3]
3.0.1 :163 > c = [:c0, :c1, :c2, :c3]
3.0.1 :164 > d = a.zip(b, c)
 => [[:a0, :b0, :c0], [:a1, :b1, :c1], [:a2, :b2, :c2], [:a3, :b3, :c3]] 
3.0.1 :165 > c = [:c0, :c1, :c2, :c3]