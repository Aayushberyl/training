	    DATABASE CONCEPTS AND COMMANDS (POSTGRESQL)

Database = It is a collection of data in form of tables which stores data in form of rows(tuples) and columns(attributes).

To Install Postgresql in ubuntu (linux)
sudo apt-get update <-- this shows updates 
Run command --> sudo get-apt install postgresql

The main files are stored in /etc/postgresql/13/main/  <-- postgresql.conf

-----------------------------------------------------------------------------
	
	Commands

1) service postgresql = to use postgresql

beryl@beryl-Latitude-E6520:~$ service postgresql
Usage: /etc/init.d/postgresql {start|stop|restart|reload|force-reload|status} [version ..]

2) service postgresql status = shows status of postgresql

beryl@beryl-Latitude-E6520:~$ service postgresql status
● postgresql.service - PostgreSQL RDBMS
   Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor prese
   Active: active (exited) since Mon 2021-06-07 10:33:26 IST; 2h 32min ago
  Process: 1511 ExecStart=/bin/true (code=exited, status=0/SUCCESS)
 Main PID: 1511 (code=exited, status=0/SUCCESS)

Jun 07 10:33:26 beryl-Latitude-E6520 systemd[1]: Starting PostgreSQL RDBMS...
Jun 07 10:33:26 beryl-Latitude-E6520 systemd[1]: Started PostgreSQL RDBMS.
lines 1-8/8 (END)

3) sudo su postgres = for first time to use postgresql use postgres username

beryl@beryl-Latitude-E6520:~$ sudo su postgres
[sudo] password for beryl: 
postgres@beryl-Latitude-E6520:/home/beryl$ 

4) psql = for command line (it is a command line tool)

postgres@beryl-Latitude-E6520:/home/beryl$ psql
Password for user postgres: 
psql (13.2 (Ubuntu 13.2-1.pgdg18.04+1), server 10.16 (Ubuntu 10.16-1.pgdg18.04+1))


5) \l = to show/list existing databases

                                    List of databases
           Name           |  Owner   | Encoding | Collate | Ctype |   Access privileges   
--------------------------+----------+----------+---------+-------+-----------------------
 highchartsJS_development | postgres | UTF8     | en_IN   | en_IN | 
 highchartsJS_test        | postgres | UTF8     | en_IN   | en_IN | 
 postgres                 | postgres | UTF8     | en_IN   | en_IN | 
 template0                | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
                          |          |          |         |       | postgres=CTc/postgres
 template1                | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
                          |          |          |         |       | postgres=CTc/postgres
(5 rows)

6) \du = it list out all the users present in postgres

                                   List of roles
 Role name |                         Attributes                         | Member of 
-----------+------------------------------------------------------------+-----------
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

7) ALTER USER postgres WITH PASSWORD 'password...'; = This will alter the default password which is postgres

ALTER ROLE = means you have successfully altered the password

postgres=# ALTER USER postgres WITH PASSWORD 'postgres';
ALTER ROLE

8) CREATE USER aayush WITH PASSWORD 'password...'; = create a new user named aayush with your desired password.

postgres=# CREATE USER aayush WITH PASSWORD 'password...';
CREATE ROLE

9) ALTER USER aayush WITH SUPERUSER; = This will alter user with superuser privileges.

postgres=# ALTER USER aayush WITH SUPERUSER;
ALTER ROLE

10) DROP USER username = This will delete user.

postgres=# CREATE USER user_1 WITH PASSWORD 'test121';
CREATE ROLE
postgres=# \du
postgres=# DROP USER user_1;
DROP ROLE

11) man psql = This command shows full description about postgreSQL and syntax , commands etc.

beryl@beryl-Latitude-E6520:~$ man psql

12) Installed (pgadmin III) - GUI s/w for postgreSQL = connect your local db using remote and enter your username and go into postgreSQL

13) \help = It displays all commands necessary in postgreSQL

------------------------------------------------------------------------------------

		DATA TYPES IN POSTGRESQL

Data types should be consistent , validate , compact , performance efficient

Users can create their own custom data type using CREATE TYPE SQL command

1) NUMERICAL DATA TYPES = It consist of two-byte, four-byte, and eight-byte integers, four-byte and eight-byte floating-point numbers, and selectable-precision decimals.

2) MONETARY DATA TYPES = The money type stores a currency amount with a fixed fractional precision.

3) CHARACTER DATA TYPES = character and text comes under this data type.

4) BINARY DATA TYPES = The bytea data type allows storage of binary strings.

5) DATE/TIME DATA TYPES = It shows date and time according to query

6) Enumerated Type = enum types that comprise a static, ordered set of values.
ex = CREATE TYPE week AS ENUM ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun');

7) NETWORK ADDRESS DATA TYPE = It offers to store IPv4, IPv6, and MAC addresses.

8) ARRAY DATA TYPES = It is used to define column  of a table as a variable multidimensional array.

ex = CREATE TABLE monthly_savings (
   name text,
   saving_per_quarter integer[],
   scheme text[][]
);

8.1) Inserting into arrays = INSERT INTO monthly_savings 
VALUES (‘Manisha’, 
‘{20000, 14600, 23500, 13250}’, 
‘{{“FD”, “MF”}, {“FD”, “Property”}}’); 

8.2) Accessing Arrays = SELECT name FROM monhly_savings WHERE saving_per_quarter[2] > saving_per_quarter[4];

8.3) Modifying Arrays = UPDATE monthly_savings SET saving_per_quarter = '{25000,25000,27000,27000}'
WHERE name = 'Manisha';

8.4) Searching Arrays = SELECT * FROM monthly_savings WHERE 10000 = ANY (saving_per_quarter);

9) COMPOSITE DATA TYPES = declaring data type = CREATE TYPE inventory_item AS (
   name text,
   supplier_id integer,
   price numeric
);

9.1) Inserting Values = INSERT INTO on_hand VALUES (ROW('fuzzy dice', 42, 1.99), 1000);

9.2) Accessing Data = SELECT (item).name FROM on_hand WHERE (item).price > 9.99;

10) RANGE TYPES = It represent data types that uses a range of data.

11) OBJECT IDENTIFIER TYPES =OIDs are used internally by PostgreSQL as primary keys for various system tables.

12) PSEUDO TYPES = They are special-purpose entries. ex = any , anyelement , anyarray , record , trigger , void .

----------------------------------------------------------------------------------------------

		DATABASE DDL AND DML COMMANDS

1) CREATE DATABASE training = It creates database named training.

postgres=# CREATE DATABASE training;
CREATE DATABASE

2) \c dbname or \connect dbname = It is used to switch the databases.

postgres=# \connect training
psql (13.2 (Ubuntu 13.2-1.pgdg18.04+1), server 10.16 (Ubuntu 10.16-1.pgdg18.04+1))
You are now connected to database "training" as user "postgres".

3) CREATE TABLE tablename (attributes dtype(size),...); = This will create table with given attributes.

4) \d tablename = This will describes the table schema.

training-# \d student
                   Table "public.student"
  Column  |      Type      | Collation | Nullable | Default 
----------+----------------+-----------+----------+---------
 rollno   | integer        |           |          | 
 s_name   | character(255) |           |          | 
 courseid | integer        |           |          | 

5) DROP DATABASE aayush; = This will drop the database.

training=# DROP DATABASE training;
ERROR:  cannot drop the currently open database
training=# exit
postgres@beryl-Latitude-E6520:/home/beryl$ psql
Password for user postgres: 
psql (13.2 (Ubuntu 13.2-1.pgdg18.04+1), server 10.16 (Ubuntu 10.16-1.pgdg18.04+1))
Type "help" for help.

postgres=# DROP DATABASE training;
DROP DATABASE

6) DROP TABLE tablename = This drops the table from database.

training=# drop table student;
DROP TABLE

7) INSERT INTO tablename VALUES(data acc to attributes) = This insert data in table.

8) SELECT * or attname FROM tablename = This Displays data of table accordin to given condition

9) ALTER TABLE tablename (ADD,DROP,DELETE,UPDATE,RENAME TO,etc) = This Alters the table means changes the table config

10) OPERATORS = used to specify condition. ex=> =,>,<,+,-,*,/,%,^,!,!= or <> , AND , NOT , OR , & , | , ~ , << , >> , #

12) EXPRESSIONS = are like formulas or methods to get the desired output. ex= select * from employee where salary=20000;

training=# select current_timestamp;
        current_timestamp         
----------------------------------
 2021-06-08 15:23:47.453259+05:30
(1 row)

13) WHERE CLAUSE = it is used to specify a condition.

training=# select * from employee where salary>20000 and salary<50000;
 id | name  | age |                      address                       | salary 
----+-------+-----+----------------------------------------------------+--------
  1 | Rahul |  20 | Faridabad                                          |  30000
  4 | Mohan |  25 | Okhla                                              |  40000
(2 rows)

14) AND OR CLAUSE = it is used to specify get output based on and or conditions.

15) UPDATE QUERY = it is used to modify existing table records.

training=# update employee set salary=60000 where id=3;
UPDATE 1

** modified row will display at last

16) DELETE QUERY = it deletes particular row based on some conditions.
   ** If you want to delete all the records from employee table, you don't need where clause 
simply write : delete from employee;

training=# delete from employee where id=5;
DELETE 1

17) LIKE CLAUSE = it is used to match text values against a pattern using wildcards (%,_). 
    here % means it may represent 0,1 or multiple numbers or characters.
    and _ underscore represents a single character or number.
    ** if either of two is not used in conjunction with LIKE clause , then like act as equal operator.

training=# select * from employee where salary::text LIKE '40%';
 id | name  | age |                      address                       | salary 
----+-------+-----+----------------------------------------------------+--------
  4 | Mohan |  25 | Okhla                                              |  40000
(1 row)


training=# select * from employee where address like 'Far%';
 id | name  | age |                      address                       | salary 
----+-------+-----+----------------------------------------------------+--------
  1 | Rahul |  20 | Faridabad                                          |  30000
(1 row)

18) LIMIT CLAUSE = it is used to limit the output rows. and OFFSET is used to give the rownum to start.

training=# select * from employee limit 3 offset 1;

 id |  name   | age |                      address                       | salary 
----+---------+-----+----------------------------------------------------+--------
  2 | Karan   |  21 | Gurugram                                           |  20000
  4 | Mohan   |  25 | Okhla                                              |  40000
  3 | Rishabh |  23 | Noida                                              |  60000
(3 rows)


19) ORDER BY CLAUSE = This is used to sort data in ascending or descending order,based on one or more columns.
    by default it sort data in ascending order.

training=# select * from employee order by id;

 id |  name   | age |                      address                       | salary 
----+---------+-----+----------------------------------------------------+--------
  1 | Rahul   |  20 | Faridabad                                          |  30000
  2 | Karan   |  21 | Gurugram                                           |  20000
  3 | Rishabh |  23 | Noida                                              |  60000
  4 | Mohan   |  25 | Okhla                                              |  40000
(4 rows)

20) GROUP BY CLAUSE = This is to group together those rows in a table that have identical data.it is used to delete redundancy.
    ** We can use only those attribute which is written with group by clause otherwise we need to use aggregate functions
     ex= select name,sum(salary) from employee group by name; <-- here we cannot write group by anything other than this.

training=# SELECT name,sum(salary) FROM employee GROUP BY name;
  name   |  sum  
---------+-------
 Rahul   | 30000
 Mohan   | 40000
 Rishabh | 60000
 Karan   | 20000
(4 rows)

21) HAVING CLAUSE = it is used on particular output.here we cannot use where because where works on whole table. 

training=# SELECT salary,count(*) FROM employee GROUP BY salary having salary>20000;
 salary | count 
--------+-------
  60000 |     1
  30000 |     1
  40000 |     1
(3 rows)

22) WITH CLAUSE = it provides a way to write complex queries as simple queries.it is also known as CTE's (Common Table Expressions)

23) DISTINCT CLAUSE = it is used to display distinct data means no redundancy.

 id |  name   | age |                      address                       | salary 
----+---------+-----+----------------------------------------------------+--------
  1 | Rahul   |  20 | Faridabad                                          |  30000
  2 | Karan   |  21 | Gurugram                                           |  20000
  4 | Mohan   |  25 | Okhla                                              |  40000
  3 | Rishabh |  23 | Noida                                              |  60000
  5 | Kunal   |  19 | Mirzapur                                           |  60000
(5 rows)


training=# select salary from employee;
 salary 
--------
  30000
  20000
  40000
  60000
  60000
(5 rows)

training=# select distinct(salary) from employee;
 salary 
--------
  60000
  20000
  30000
  40000
(4 rows)

24) UNION CLAUSE = It is used to combine results of two or more selected statements avoiding redundant data.

25) UNION ALL CLAUSE = It is used to combine results of two or more selected statements including redundant data.

26) NULL = It is used to represent a missing value.
   **IS NULL = it specifies that data is null.you cannot insert data in that particular problem.
   **IS NOT NULL = it specifies that column is not null.
   **NOT NULL = it specifies that value of particular column cannot be null.

27) ALIAS = it is used to rename a table's column for purpose of particular postgresql query.

training=# select e.id,e.name,d.dept,e.salary from employee as e,department as d where e.id=d.emp_id order by id;


 id |  name   |                        dept                        | salary 
----+---------+----------------------------------------------------+--------
  1 | Rahul   | Manager                                            |  30000
  2 | Karan   | SDE                                                |  20000
  3 | Rishabh | IT                                                 |  60000
  4 | Mohan   | HR                                                 |  40000
(4 rows)


28) TRIGGERS = They are database callback functions which are automatically performed when specific db event occurs.	

29) ALTER TABLE = it is used to do manipulations on table as well as data.

30) TRUNCATE = it is used to delete complete data from an existing table in one go. It is a DDL command

31) CREATE VIEW = It is used to make the view that the user is desired to see.

training=# create view employee_details as select name,salary from employee;
CREATE VIEW

training=# select * from employee_details;
  name   | salary 
---------+--------
 Rahul   |  30000
 Karan   |  20000
 Mohan   |  40000
 Rishabh |  60000
 Kunal   |  60000
(5 rows)


32) DROP VIEW = It is used to drop the view.

training=# drop view employee_details;
DROP VIEW

33) TRANSACTIONS = it is the propagation of one or more changes in dastabase.
    **ACID PROPERTIES <-- Atomicity,Consistency,Isolation,Durability
    **TCL COMMANDS = Begin,Commit or end,Rollback.
34) select NOW() = it is used to display current date and time according tom your time zone.
training=# select now();
               now                
----------------------------------
 2021-06-09 16:22:56.169075+05:30
(1 row)

35) Current date = it displays current date.

training=# select current_date;
 current_date 
--------------
 2021-06-09
(1 row)


36) AGE(argument) = it displays age according to current timestamp.

airlines=# select age(timestamp '2000-07-24');
           age            
--------------------------
 20 years 10 mons 18 days
(1 row)


                                                                                                                              name                                                                                                                               |           age           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------
 Aditya                                                                                                                                                                                                                                                          | 25 years 25 days
 Isha                                                                                                                                                                                                                                                            | 20 years 9 mons 29 days
 Garima                                                                                                                                                                                                                                                          | 19 years 7 mons 4 days
(3 rows)

---------------------------------------------------------------------------

			CONSTRAINTS IN POSTGRESQL

These are the rules that ensures accuracy and reliability of data.

** Constraints could be column and row level.
** Many Constraints can be used at a time on a single column.
** Commonly used Constraints are :

1) NOT NULL = It ensures that data should not be null.

2) UNIQUE = used to prevent duplicacy. It ensures that all values in column must be different.

3) PRIMARY KEY = It is used to idedntify each row/column uniquely. (UNIQUE + NOT NULL) 
   ** When multiple fields are used as primary key then it is known as COMPOSITE KEY.
   ** To drop primary key we use this syntax = ALTER TABLE table_name DROP CONSTRAINT primary_key_constraint;

4) FOREIGN KEY = It is used to maintain referential integrity. Basically the primary key in referenced table acts as a foreign key in the referencing table. Using references keyword we can add foreign key ex = emp_id references COMPANY6(ID)

5) CHECK = It ensures that all values must satisfy certain conditions. ex = salary int check(salary>0)

6) EXCLUSION = It ensure that if any two rows are compared on the specified columns or expressions using the specified operators, at least one of these operator comparisons will return false or null.
Syntax=EXCLUDE USING gist (name with = , age with <>) here gist is type of index used to build and used for enforcement.

7) AUTO INCREMENT = it increments value by 1.by default increment value is 1.

8) PRIVILEGES = it is the permissions given to a user. generally they use GRANT/REVOKE.

testdb=# GRANT ALL ON employee TO manisha;
GRANT

testdb=# REVOKE ALL ON COMPANY FROM manisha;
REVOKE


9) ABS(Numeric Value) = It converts negative value into positive value.

airlines=# select abs(-45);
 abs 
-----
  45
(1 row)



** When we want to auto increment primary key we use serial keyword. ex=ALTER TABLE tbname ADD COLUMN ID SERIAL PRIMARY KEY;

----------------------------------------------------------------------------

				POSTGRESQL JOINS

** JOINS are used to combine records from 2 or more tables in a database.

1) CROSS JOIN = Its is basically cartesian product used to evaluate the output based on some input conditions.
** No. of columns in cartesian product is (m+n) and No. of Rows in Cartesian product is (m*n)

select * from employee cross join department; 	OR	select * from employee,department; <-- Both will give same o/p i.e, Cartesian Product.

2) INNER JOIN = it creates table by combining column values of 2 tables based upon join-predicate.

** When 2 tables have same column name so we can use USING clause otherwise ON.

training=# select name from employee inner join department on employee.id=department.emp_id;
  name   
---------
 Rahul
 Karan
 Rishabh
 Mohan
(4 rows)

** Using WHERE clause with ON clause..

training=# select name from employee join department on employee.id=department.emp_id where dept='IT';
  name   
---------
 Rishabh
(1 row)


3) LEFT OUTER JOIN = here inner join is performed first,then all rows of first table + the common rows result in output. 

training=# select * from employee left outer join department on department.emp_id = employee.id order by employee.id;


 id |  name   | age |                      address                       | salary | id |                        dept                        | emp_id 
----+---------+-----+----------------------------------------------------+--------+----+----------------------------------------------------+--------
  1 | Rahul   |  20 | Faridabad                                          |  30000 |  1 | Manager                                            |      1
  2 | Karan   |  21 | Gurugram                                           |  20000 |  2 | SDE                                                |      2
  3 | Rishabh |  23 | Noida                                              |  60000 |  3 | IT                                                 |      3
  4 | Mohan   |  25 | Okhla                                              |  40000 |  4 | HR                                                 |      4
  5 | Kunal   |  19 | Mirzapur                                           |  60000 |    |                                                    |       
(5 rows)


4) RIGHT OUTER JOIN=here inner join is performed first,then all rows of second table + the common rows result in output.

training=# select * from employee right outer join department on department.emp_id = employee.id order by employee.id;


 id |  name   | age |                      address                       | salary | id |                        dept                        | emp_id 
----+---------+-----+----------------------------------------------------+--------+----+----------------------------------------------------+--------
  1 | Rahul   |  20 | Faridabad                                          |  30000 |  1 | Manager                                            |      1
  2 | Karan   |  21 | Gurugram                                           |  20000 |  2 | SDE                          training=# select * from employee right outer join department on department.emp_id = employee.id order by employee.id;
                      |      2
  3 | Rishabh |  23 | Noida                                              |  60000 |  3 | IT                                                 |      3
  4 | Mohan   |  25 | Okhla                                              |  40000 |  4 | HR                                                 |      4
(4 rows)

5) FULL OUTER JOIN = It is basically union of the two tables.

training=# select * from employee full outer join department on department.emp_id = employee.id order by employee.id;


 id |  name   | age |                      address                       | salary | id |                        dept                        | emp_id 
----+---------+-----+----------------------------------------------------+--------+----+----------------------------------------------------+--------
  1 | Rahul   |  20 | Faridabad                                          |  30000 |  1 | Manager                                            |      1
  2 | Karan   |  21 | Gurugram                                           |  20000 |  2 | SDE                                                |      2
  3 | Rishabh |  23 | Noida                                              |  60000 |  3 | IT                                                 |      3
  4 | Mohan   |  25 | Okhla                                              |  40000 |  4 | HR                                                 |      4
  5 | Kunal   |  19 | Mirzapur                                           |  60000 |    |                                                    |       
(5 rows)


6) NATURAL JOIN = it joins 2 tables based on common column name.

select name from employee natural join department == select name from employee,department where employee.id=department.id 

training=# select * from employee natural join department;


 id |  name   | age |                      address                       | salary |                        dept                        | emp_id 
----+---------+-----+----------------------------------------------------+--------+----------------------------------------------------+--------
  1 | Rahul   |  20 | Faridabad                                          |  30000 | Manager                                            |      1
  2 | Karan   |  21 | Gurugram                                           |  20000 | SDE                                                |      2
  4 | Mohan   |  25 | Okhla                                              |  40000 | HR                                                 |      4
  3 | Rishabh |  23 | Noida                                              |  60000 | IT                                                 |      3
(4 rows)


----------------------------------------------------------------------------


	CREATED A EMPLOYEE TABLE AND DEPARTMENT TABLE

training=# CREATE TABLE COMPANY(ID INT PRIMARY KEY NOT NULL,NAME TEXT NOT NULL,AGE INT NOT NULL,ADDRESS CHAR(50),SALARY REAL);
CREATE TABLE
training=# \d
          List of relations
 Schema |  Name   | Type  |  Owner   
--------+---------+-------+----------
 public | company | table | postgres
(1 row)

training=# \d company
                  Table "public.company"
 Column  |     Type      | Collation | Nullable | Default 
---------+---------------+-----------+----------+---------
 id      | integer       |           | not null | 
 name    | text          |           | not null | 
 age     | integer       |           | not null | 
 address | character(50) |           |          | 
 salary  | real          |           |          | 
Indexes:
    "company_pkey" PRIMARY KEY, btree (id)

training=# create table department (id int primary key not null , dept char(50) not null , emp_id int not null);
CREATE TABLE
training=# \d
           List of relations
 Schema |    Name    | Type  |  Owner   
--------+------------+-------+----------
 public | company    | table | postgres
 public | department | table | postgres
(2 rows)


		INSERTING DATA IN TABLES

training=# insert into company values(2,'Karan',21,'Gurugram',20000),(3,'Rishabh',23,'Noida',50000),(4,'Mohan',25,'Okhla',40000);
INSERT 0 3

training=# select * from company;


<pre> id |  name   | age |                      address                       | salary 
----+---------+-----+----------------------------------------------------+--------
  1 | Rahul   |  20 | Faridabad                                          |  30000
  2 | Karan   |  21 | Gurugram                                           |  20000
  3 | Rishabh |  23 | Noida                                              |  50000
  4 | Mohan   |  25 | Okhla                                              |  40000
(4 rows)
</pre>

		AGGREGATE FUNCTIONS (MIN,MAX,AVG,SUM,COUNT)

1) MAX = It displays max value.
training=# select max(salary) from company;
  max  
-------
 50000
(1 row)

2) MIN = it displays min value.

training=# select min(salary) from company;
  min  
-------
 20000
(1 row)

3) COUNT = This count no. of rows.

training=# select count(*) from company;
 count 
-------
     4
(1 row)

4) SUM = Displays sum of particular attribute column.

training=# select sum(salary) from company;
  sum   
--------
 140000
(1 row)

5) AVG = it displays average of the particular column.

training=# select avg(salary) from company;
  avg  
-------
 35000
(1 row)

6) ARRAY_AGG function = It is used to concatenate the input values including null into an array.

airlines=# select array_agg(salary) from employees;
                         array_agg                         
-----------------------------------------------------------
 {140000,80000,35000,90000,50000,110000,85000,90000,45000}
(1 row)


	RENAMING TABLE NAME FROM COMPANY TO EMPLPOYEE

training=# alter table company rename to employee;
ALTER TABLE


			SQL QUERRIES PRACTICE

Q1)select name of an employee who is working in SDE department.

training=# select name from company where id=(select emp_id from department where dept='SDE');
 name  
-------
 Karan
(1 row)

Q2) Display How many employees taking salary with salary

training=# select count(name),salary from employee group by salary;
 count | salary 
-------+--------
     1 |  20000
     1 |  50000
     1 |  30000
     1 |  40000
(4 rows)

Q3) 
